// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	submitter "github.com/synapsecns/sanguine/ethergo/submitter"
)

// TransactionSubmitter is an autogenerated mock type for the TransactionSubmitter type
type TransactionSubmitter struct {
	mock.Mock
}

// GetNumPendingTxes provides a mock function with given fields: chainID
func (_m *TransactionSubmitter) GetNumPendingTxes(chainID uint32) int {
	ret := _m.Called(chainID)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint32) int); ok {
		r0 = rf(chainID)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetSubmissionStatus provides a mock function with given fields: ctx, chainID, nonce
func (_m *TransactionSubmitter) GetSubmissionStatus(ctx context.Context, chainID *big.Int, nonce uint64) (submitter.SubmissionStatus, error) {
	ret := _m.Called(ctx, chainID, nonce)

	var r0 submitter.SubmissionStatus
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int, uint64) submitter.SubmissionStatus); ok {
		r0 = rf(ctx, chainID, nonce)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(submitter.SubmissionStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *big.Int, uint64) error); ok {
		r1 = rf(ctx, chainID, nonce)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: ctx
func (_m *TransactionSubmitter) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitTransaction provides a mock function with given fields: ctx, chainID, call
func (_m *TransactionSubmitter) SubmitTransaction(ctx context.Context, chainID *big.Int, call submitter.ContractCallType) (uint64, error) {
	ret := _m.Called(ctx, chainID, call)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int, submitter.ContractCallType) uint64); ok {
		r0 = rf(ctx, chainID, call)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *big.Int, submitter.ContractCallType) error); ok {
		r1 = rf(ctx, chainID, call)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionSubmitter interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionSubmitter creates a new instance of TransactionSubmitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionSubmitter(t mockConstructorTestingTNewTransactionSubmitter) *TransactionSubmitter {
	mock := &TransactionSubmitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
